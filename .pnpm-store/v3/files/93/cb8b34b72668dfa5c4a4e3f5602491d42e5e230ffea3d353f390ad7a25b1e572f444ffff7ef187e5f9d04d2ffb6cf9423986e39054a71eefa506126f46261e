'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const mockAdapter = {
  appendCss: () => {},
  registerClassName: () => {},
  onEndFileScope: () => {},
  registerComposition: () => {},
  markCompositionUsed: () => {},
  getIdentOption: () => 'debug'
};
const adapterStack = [mockAdapter];

const currentAdapter = () => {
  if (adapterStack.length < 1) {
    throw new Error('No adapter configured');
  }

  return adapterStack[adapterStack.length - 1];
};

let hasConfiguredAdapter = false;
const setAdapterIfNotSet = newAdapter => {
  if (!hasConfiguredAdapter) {
    setAdapter(newAdapter);
  }
};
const setAdapter = newAdapter => {
  hasConfiguredAdapter = true;
  adapterStack.push(newAdapter);
};
const removeAdapter = () => {
  adapterStack.pop();
};
const appendCss = (...props) => {
  return currentAdapter().appendCss(...props);
};
const registerClassName = (...props) => {
  return currentAdapter().registerClassName(...props);
};
const registerComposition = (...props) => {
  return currentAdapter().registerComposition(...props);
};
const markCompositionUsed = (...props) => {
  return currentAdapter().markCompositionUsed(...props);
};
const onEndFileScope = (...props) => {
  return currentAdapter().onEndFileScope(...props);
};
const getIdentOption = (...props) => {
  const adapter = currentAdapter(); // Backwards compatibility with old versions of the integration package

  if (!('getIdentOption' in adapter)) {
    return 'short' ;
  }

  return adapter.getIdentOption(...props);
};

exports.appendCss = appendCss;
exports.getIdentOption = getIdentOption;
exports.markCompositionUsed = markCompositionUsed;
exports.mockAdapter = mockAdapter;
exports.onEndFileScope = onEndFileScope;
exports.registerClassName = registerClassName;
exports.registerComposition = registerComposition;
exports.removeAdapter = removeAdapter;
exports.setAdapter = setAdapter;
exports.setAdapterIfNotSet = setAdapterIfNotSet;
