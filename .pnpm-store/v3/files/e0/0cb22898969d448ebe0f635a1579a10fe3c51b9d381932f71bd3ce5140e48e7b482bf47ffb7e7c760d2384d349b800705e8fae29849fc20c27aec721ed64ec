var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// src/index.tsx
__markAsModule(exports);
__export(exports, {
  createBox: () => createBox,
  createBoxWithAtomsProp: () => createBoxWithAtomsProp
});
var import_react = __toModule(require("react"));
function createBox({
  atoms: atomsFn,
  defaultClassName
}) {
  const Box = (0, import_react.forwardRef)(({as: element = "div", className, ...props}, ref) => {
    let hasAtomProps = false;
    let atomProps = {};
    let otherProps = {};
    for (const key in props) {
      if (atomsFn.properties.has(key)) {
        hasAtomProps = true;
        atomProps[key] = props[key];
      } else {
        otherProps[key] = props[key];
      }
    }
    const classes = [
      defaultClassName,
      className,
      hasAtomProps && atomsFn(atomProps)
    ].filter(Boolean);
    return (0, import_react.createElement)(element, {
      ref,
      ...otherProps,
      className: classes.length === 0 ? void 0 : classes.join(" ")
    });
  });
  return Box;
}
function createBoxWithAtomsProp({
  atoms: atomsFn,
  defaultClassName
}) {
  const Box = (0, import_react.forwardRef)(({as: element = "div", className, atoms, ...props}, ref) => {
    const hasAtomProps = typeof atoms !== "undefined";
    const classes = [
      defaultClassName,
      className,
      hasAtomProps && atomsFn(atoms)
    ].filter(Boolean);
    return (0, import_react.createElement)(element, {
      ref,
      ...props,
      className: classes.length === 0 ? void 0 : classes.join(" ")
    });
  });
  return Box;
}
//# sourceMappingURL=index.js.map
