import React from "react";
import type { CreateBoxParams } from "./types";
interface AtomsFnBase {
    (...args: any): string;
    properties: Set<string>;
}
declare type HTMLProperties = Omit<React.AllHTMLAttributes<HTMLElement>, "as" | "color" | "height" | "width">;
export declare function createBox<AtomsFn extends AtomsFnBase>({ atoms: atomsFn, defaultClassName, }: CreateBoxParams<AtomsFn>): React.ForwardRefExoticComponent<React.PropsWithoutRef<{
    as?: React.ElementType<any> | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
} & Parameters<AtomsFn>[0] & HTMLProperties> & React.RefAttributes<HTMLElement>>;
export declare function createBoxWithAtomsProp<AtomsFn extends AtomsFnBase>({ atoms: atomsFn, defaultClassName, }: CreateBoxParams<AtomsFn>): React.ForwardRefExoticComponent<{
    as?: React.ElementType<any> | undefined;
    children?: React.ReactNode;
    className?: string | undefined;
    atoms?: Parameters<AtomsFn>[0] | undefined;
} & HTMLProperties & React.RefAttributes<HTMLElement>>;
export {};
//# sourceMappingURL=index.d.ts.map